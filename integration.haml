!!! 5
-# paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/
<!--[if lt IE 7]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7]>    <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8]>    <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if gt IE 8]><!-->
%html.no-js{ :lang => "en" }
  <!--<![endif]-->
  %head
    %meta{ :charset => "utf-8" }/
    
    -# Always force latest IE rendering engine (even in intranet) & Chrome Frame
    -# Remove this if you use the .htaccess
    %meta{ "http-equiv" => "X-UA-Compatible", :content => "IE=edge,chrome=1" }/
    
    %title
    %meta{ :name => "description", :content => "" }/
    %meta{ :name => "author", :content => "" }/
    
    -# Mobile viewport optimized: j.mp/bplateviewport
    %meta{ :name => "viewport", :content => "width=device-width, initial-scale=1.0" }/
    
    -# Place favicon.ico and apple-touch-icon.png in the root directory: mathiasbynens.be/notes/touch-icons
    
    -# CSS: implied media="all"
    %link{ :href => "stylesheets/style.css?v=1", :media => "all", :rel => "stylesheet" }/

    %link{ :href => "stylesheets/github.css", :media => "all", :rel => "stylesheet" }/
    
    -# All JavaScript at the bottom, except for Modernizr and Respond.
    -# Modernizr enables HTML5 elements & feature detects; Respond is a polyfill for min/max-width CSS3 Media Queries
    %script{ :src => "javascripts/modernizr.min.js" }
    %script{ :src => "javascripts/respond.min.js" }
    %script{ :src => "javascripts/highlight.pack.js"}
    :javascript
      hljs.tabReplace = '    ';
      hljs.initHighlightingOnLoad();
    
  %body
    %a{ :name => "top" }
    #container
      #page-logo
        %img{ :src => 'images/logo.jpg' }
      #separator
      #page-title
        %h1 Интеграция с Яндекс.Страховки
      %nav#page-crumbs 
        %span{ :style => "font-weight: bold" } Вы здесь: 
        %a{ :href => "index.html" } Содержание
        %span{ :style => "font-weight: bold" } >
        %a{ :href => "integration.html" } Интеграция клиентских сайтов
      %section#page-main{ :role => 'main' }
        :markdown
          <a name="1"></a>
          Краткое введение
          ================

          В данном разделе изложена краткая информация по интеграции клиентских сайтов с Яндекс.Страховки через "Умный Полис".

          Описаны основные моменты интеграции, показаны примеры интеграции, а также описаны заметки по безопасности, а также основные проблемы, с которыми сталкиваются пользователи при попытке интеграции своего сайта с "Умный Полис".

          <a name="2"></a>
          Конечная цель интеграции
          ========================

          Конечной целью интеграции клиентских сайтов, является предоставление удобной и функциональной страницы оформления заявки на страховой полис для пользователей Яндекс.Страховки, с получением информации о запросе пользователя, и результата расчета.

          Дальнейшее использование полученной информации и схема оформления заявки не является частью интеграции, и может быть реализована в соответствии с архитектурой и требованиями пользовательского web-приложения.

          <a name="3"></a>
          Основные моменты проведения интеграции
          ======================================

          Для конечного результата, следует реализовать следующую схему работы участка приложения:

          * Прием GET-параметров Яндекс.Страховки, передаваемых через "Умный Полис";
          * Запрос данных расчета и результата по API "Умный Калькулятор", используя полученные параметры;
          * Формирование страницы оформления заявки, на основе полученных данных.

          <a name="4"></a>
          Параметры передаваемые на страницу приземления
          ----------------------------------------------

          При редиректе пользователя от Яндекс.Страховки на "Умный Полис", и далее на страницу приземления, "Умный Полис" формирует GET-запрос для клиентского сайта, состоящий из трех параметров:

          * `calculation_id` - id расчета в архиве "Умный Полис";
          * `assurer_id` - id страховой компании в архиве "Умный Полис";
          * `tarif` - рассчитанная стоимость страхового полиса;
          * `from=yandex.strahovki` - индикатор, который показывает, что запрос пришел от Яндекс.Страховки.

          Обязательными и достаточными данными, для получения информации по API "Умный Полис" являются параметры `calculation_id` и `assurer_id`.

          <a name="5"></a>
          Запрос данных расчета и результата по API "Умный Полис", используя полученные параметры
          ---------------------------------------------------------------------------------------------

          Получив GET-запрос, клиентский сайт, используя учетную запись может получить данные о расчете, используя API "Умный Полис".

          Для получения информации по параметрам, введенным пользователем в Яндекс.Страховки, по которым велся расчет, можно использовать API описанный [здесь].

          Для получения информации по результату, можно использовать API описанный [здесь].

          <a name="6"></a>
          Формирование страницы оформления заявки, на основе полученных данных
          --------------------------------------------------------------------

          Получив данные по API, клиентское приложение може сформировать требуемую страницу оформления заявки. Детали реализации, и возможности страницы зависят только от технического задания к клиентскому приложению, и предъявленным к нему требованиям. 

          <a name="7"></a>
          Использование расчета внутри калькулятора
          -----------------------------------------

          Доступ к расчету может быть получен не только по API, но так же через обычный интерфейс калькулятора "Умный Полис", используя аккаунт, через который производится авторизация по API, или аккаунт администратора компании.

          <a name="8"></a>
          Интерфейс тестирования
          ======================

          Для тестирования клиентской страницы приземления, был разработан простой тестовый стенд, который формирует случайный список расчетов, и формирует GET-запросы на страницу приземления, и позволяет динамически менять адрес.

          Случайный список расчетов для тестирования формируется на базе архива расчета пользователя. Если пользователь не авторизован в системе "Умный Полис", и перешел на страницу тестового стенда, то по умолчанию, для формирования списка будут использоваться расчеты из архива пользователя `demo@spb`, который является демо-аккаунтом, и может быть использован для тестирования страницы приземления.

          Для авторизации пользователя `demo@spb` можно использовать следующие данные аутентификации:

          * Имя пользователя: `demo@spb`;
          * Пароль: `123`.

          <a name="9"></a>
          Замечания по безопасности
          -------------------------

          В связи с многочисленными вопросами, и проблемами, с которыми сталкиваются наши клиенты в начале тестирования своего сайта, следует описать ограничения, наложенные на доступ к API.

          По API доступ к расчету может получить только тот пользователь, от имени которого производился расчет, или администратор компании, к которой принадлежит данный пользователь в системе "Умный Полис".

          То есть, если расчет проведен пользователем `vasya@pupkin`, и к нему попытается получить доступ пользователь `petr@ivanov`, то он получит либо пустой запрос, либо ошибку `Django Piston`, которая будет выглядеть примерно так:

          <pre><code class="python">Piston/0.2.2 (Django 1.1.1) crash report:

          Traceback (most recent call last):

            File "/vhosts/casco.cmios.ru/htdocs/casco/api/handlers.py", line 159, in read
              calculation = calculations.get(id=calculation_id)

            File "/var/www/casco.cmios.ru/lib/python2.5/site-packages/django/db/models/query.py", line 305, in get
              % self.model._meta.object_name)

          DoesNotExist: Calculation matching query does not exist.
          </code></pre>

          Поэтому, если вы встретите такую ошибку, то не паникуйте, а еще раз проверьте соответствие прав доступа, и от чьего имени производится запрос.

          <a name="10"></a>
          Пример страницы приземления
          ===========================

          Для того, чтобы было проще разобраться с реализацией, был написан пример страницы приземления.

          Чтобы посмотреть на него, выйдите из системы "Умный Полис", и перейдите по адресу <http://casco.cmios.ru/testbed>.

          Вы попадете на интерфейс тестового стенда, и будете работать от имени пользователя `demo@spb`.

          После того, как загрузится тестовый список расчетов, просто нажмите ссылку "Оформить заявку", рядом с понравившимся примером.

          В новом окне откроется пример страницы приземления, с уже обработанным GET-запросом.

          **Примечание:** Если вы попытаетесь перейти по ней, не выйдя из системы "Умный Полис", то странице приземления будут переданы параметры вашего расчета, и для пользователя `demo@spb` будет закрыт доступ (от его имени страница приземления получает результаты расчета), что заставит вместо рабочего примера, показать ошибку.

          <a name="11"></a>
          Исходный код примера
          --------------------

          Исходный код примера открыт, и вы можете найти его на GitHub:

          * Адрес репозитория с исходным кодом: <https://github.com/demiazz/landing-example>;
          * Прямая ссылка на архив с исходным кодом последней версии: <https://github.com/demiazz/landing-example/zipball/master>.

          Так же, если вы пользуетесь системой управления версиями Git, то можете получить исходный код, выполнив следующую команду в консоли:

          <pre><code class="bash">git clone git://github.com/demiazz/landing-example.git</code></pre>

          <a name="12"></a>
          Краткое описание файлов примера
          -------------------------------

          Пример страницы приземления небольшой, и состоит из нескольких скриптов:

          * `htdocs/landing.php` - собственно, основной скрипт, который отвечает за получение параметров, запрос данных из калькулятора "Умный Полис", и формирование той или йной страницы;
          * `landing/api.class.php` - в данном скрипте представлен класс, для доступа к API "Умный Полис". Это немного улучшенная и причесанная версия класса, который Вы могли видеть и использовать для работы с API "Умный Полис";
          * `index.php` - данный скрипт отвечает за формирование страницы оформления заявки, используя полученные данные;
          * `error.php` - данный скрипт отвечает за формирование страницы с ошибкой, вместо страницы оформления заявки. 

          **Примечание:** В нашем примере дозволено сделать страницы ошибки, чтобы вы могли легко определить, когда делаете что-то не так. В реальном веб-приложении так делать категорически не рекомендуется. Следует продумать другие возможности предупреждения пользователя, о том, что что-то пошло не так.

          <a name="13"></a>
          Краткое класса для доступа к API "Умный Полис"
          ---------------------------------------------------------------------

          Полный листинг класса, вы можете посмотреть по адресу: <https://github.com/demiazz/landing-example/blob/master/landing/api.class.php>, или скачав пример. 

          Чтобы использовать данный класс, вы должны создать объект, используя данные для аутентификации (данные вашей учетной записи в системе "Умный Полис"). Например, так:

          <pre><code class="php">// Подключение файла с классом
          require_once('../landing/api.class.php');

          // Создание объекта класса
          $api = new CascoAPI('your_login', 'your_password');
          </code></pre>

          Здесь, `your_login` и `your_password` нужно заменить на имя пользователя, и пароль вашей учетной записи, через которую будет вестись доступ к калькулятору из Вашего приложения.

          Ниже код из примера, где получаются данные по расчету и результат расчета для определенной страховой компании:

          <pre><code class="php">$calculation = $api->getCalculationResult($calculation_id);
          $result = $api->getCalculationResultForAssurer($calculation_id, $assurer_id);   
          </code></pre>

          Как видно из кода ниже, получив расчет и результат, стоит проверить успешность их получения, и решить, что делать дальше. В нашем случае, это либо формирование страницы с формой оформления заявки, либо формирование страницы с ошибкой:

          <pre><code>if (($calculation != NULL) and ($result != NULL)) {
              $status = 'SUCCESS';    
              include('../landing/index.php');
          } else {
              $status = 'NULL_RESPONSE';
              include('../landing/error.php');
          }
          </code></pre>

          С помощью данного класса можно получать и другую информацию, которая доступна через API. Исходный код класса хорошо документирован.

          <a name="14"></a>
          Примечание к примеру
          --------------------

          Данный пример не является каноническим, и не является единственным рекомендуемым. Он лишь демонстрирует один из путей, как можно реализовать страницу приземления. В данном случае, предполагается, что страница приземления реализуется для веб-приложения написанного на PHP, без использования каких-либо фреймворков, или CMS.

          Для реализации страницы в вашем приложении, настоятельно рекомендуем интегрировать данный механизм, согласно рекомендациям и use case'ам, которые приемлемы в отношении используемых Вами инструментах.

          <a name="15"></a>
          Дополнительная информация по дальнейшему развитию
          =================================================

          Как и любое программное обеспечение, наш калькулятор постоянно совершенствуется и развивается. В большей части, это касается внутренних механизмов работы, оптимизации, повышения скорости работы и стабильности. Однако, иногда могут проводиться изменения во внешнем интерфейсе, например веб-интерфейс калькулятора, или API.

          В случае, если будут какие-то изменения в API, или механизмах интеграции с Яндекс.Страховки, мы предупредим Вас об изменениях, и дадим время на обновление Ваших веб-приложений, до того момента, когда старые версии API не будут убраны из системы. 
      %nav#page-menu
        .part-link
          %p.header Предыдущий раздел
          %p 
            %a{ :href => "calculator.html" } Роль "Умный Полис" в Яндекс.Страховки
        .part-link
          %p.header Следующий раздел
          %p 
            %a{ :href => "api.html" } API "Умный Полис"
        .part-link
          %p.header Содержание раздела
          %ul
            %li
              %a{ :href => "integration.html#1" } Краткое введение
            %li
              %a{ :href => "integration.html#2" } Конечная цель интеграции
            %li
              %a{ :href => "integration.html#3" } Основные моменты проведения интеграции
              %ul
                %li
                  %a{ :href => "integration.html#4" } Параметры передаваемые на страницу приземления
                %li
                  %a{ :href => "integration.html#5" } Запрос данных расчета и результата по API "Умный Полис", используя полученные параметры
                %li
                  %a{ :href => "integration.html#6" } Формирование страницы оформления заявки, на основе полученных данных
                %li
                  %a{ :href => "integration.html#7" } Использование расчета внутри калькулятора
            %li
              %a{ :href => "integration.html#8" } Интерфейс тестирования
              %ul
                %li
                  %a{ :href => "integration.html#9" } Замечания по безопасности
            %li
              %a{ :href => "integration.html#10" } Пример страницы приземления
              %ul
                %li
                  %a{ :href => "integration.html#11" } Исходный код примера
                %li
                  %a{ :href => "integration.html#12" } Краткое описание файлов примера
                %li
                  %a{ :href => "integration.html#13" } Краткое класса для доступа к API "Умный Полис"
                %li
                  %a{ :href => "integration.html#14" } Примечание к примеру
                %li
                  %a{ :href => "integration.html#15" } Дополнительная информация по дальнейшему развитию
      .clear
      %footer#page-footer
        %p{ :style => "text-align: center" } Copyright (c) 2011, Технологии Страхования
      #top-link-container
        %a.top-link{ :href => "#top" } Наверх &uarr;
      
    -# 
      Javascript at the bottom for fast page loading
      Grab Google CDN's jQuery, with a protocol relative URL; fall back to local if necessary
    %script{ :src => "//ajax.googleapis.com/ajax/libs/jquery/1.6/jquery.js" }
    :javascript
      window.jQuery || document.write("<script src='js/jquery.min.js'>\x3C/script>")
    
    %script{ :src => "js/plugins.js?v=1" }
    %script{ :src => "js/script.js?v=1" }
    
    -#  asynchronous google analytics: mathiasbynens.be/notes/async-analytics-snippet
    -#  change the UA-XXXXX-X to be your site's ID
    :javascript
      var _gaq=[["_setAccount","UA-XXXXX-X"],["_trackPageview"],["_trackPageLoadTime"]];
      (function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];g.async=1;
      g.src=("https:"==location.protocol?"//ssl":"//www")+".google-analytics.com/ga.js";
      s.parentNode.insertBefore(g,s)}(document,"script"));
